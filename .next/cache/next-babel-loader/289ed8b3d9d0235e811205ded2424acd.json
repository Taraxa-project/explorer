{"ast":null,"code":"const mongoose = require('mongoose');\n\nconst Tx = new mongoose.Schema({\n  _id: {\n    type: String\n  },\n  // tx hash\n  blockHash: {\n    type: String,\n    ref: 'Block',\n    index: true\n  },\n  blockNumber: {\n    type: Number,\n    index: true\n  },\n  from: {\n    type: String,\n    index: true\n  },\n  gas: {\n    type: Number\n  },\n  gasPrice: {\n    type: Number\n  },\n  input: {\n    type: String\n  },\n  nonce: {\n    type: Number\n  },\n  to: {\n    type: String,\n    index: true\n  },\n  transactionIndex: {\n    type: Number\n  },\n  value: {\n    type: Number\n  },\n  //not in rpc\n  timestamp: {\n    type: Date,\n    default: Date.now\n  } //override with block timestamp on finality\n\n});\n\nTx.statics.fromRPC = function fromRPC(data) {\n  const json = Object.assign({}, data); // using hash as primary key\n\n  json._id = json.hash;\n  delete json.hash;\n  const hexKeys = ['blockNumber', 'gas', 'gasPrice', 'nonce', 'value', 'timestamp'];\n  hexKeys.forEach(key => {\n    if (key === 'timestamp') {\n      json[key] = json[key] * 1000;\n    }\n\n    if (json[key]) {\n      json[key] = parseInt(json[key], 16);\n    }\n  });\n  return new this(json);\n};\n\nTx.methods.toRPC = function toRPC() {\n  const json = this.toJSON(); // using hash as primary key\n\n  json.hash = this._id;\n  delete json._id; // delete non standard key\n\n  delete json.timestamp;\n  const hexKeys = ['blockNumber', 'gas', 'gasPrice', 'nonce', 'value'];\n  hexKeys.forEach(key => {\n    if (this[key]) {\n      json[key] = this[key].toString(16);\n    }\n  });\n  return json;\n};\n\nmodule.exports = mongoose.model('Tx', Tx);","map":null,"metadata":{},"sourceType":"script"}