{"ast":null,"code":"const mongoose = require('mongoose');\n\nconst Block = new mongoose.Schema({\n  _id: {\n    type: String\n  },\n  // block hash\n  author: {\n    type: String\n  },\n  extraData: {\n    type: String\n  },\n  gasLimit: {\n    type: Number\n  },\n  gasUsed: {\n    type: Number\n  },\n  logsBloom: {\n    type: String\n  },\n  miner: {\n    type: String\n  },\n  mixHash: {\n    type: String\n  },\n  nonce: {\n    type: Number\n  },\n  number: {\n    type: Number,\n    unique: true\n  },\n  parentHash: {\n    type: String\n  },\n  receiptsRoot: {\n    type: String\n  },\n  sha3Uncles: {\n    type: String\n  },\n  size: {\n    type: Number\n  },\n  stateRoot: {\n    type: String\n  },\n  timestamp: {\n    type: Date,\n    index: true\n  },\n  totalDifficulty: {\n    type: Number\n  },\n  transactions: [{\n    type: String,\n    ref: 'Tx'\n  }],\n  transactionsRoot: {\n    type: String\n  },\n  uncles: [{\n    type: String\n  }]\n}, {\n  versionKey: false\n});\n\nBlock.statics.fromRPC = function fromRPC(data) {\n  const json = Object.assign({}, data); // move hash to primary key _id\n\n  json._id = json.hash;\n  delete json.hash;\n  const hexKeys = ['gasLimit', 'gasUsed', 'nonce', 'number', 'size', 'timestamp'];\n  hexKeys.forEach(key => {\n    if (json[key]) {\n      json[key] = parseInt(json[key], 16);\n    }\n\n    if (key === 'timestamp') {\n      json[key] = json[key] * 1000;\n    }\n  });\n\n  if (json.transactions && json.transactions.length) {\n    json.transactions = json.transactions.map(doc => doc.hash || doc);\n  }\n\n  return new this(json);\n};\n\nBlock.methods.toRPC = function toRPC() {\n  const json = this.toJSON(); // get hash from primary key _id\n\n  json.hash = this._id;\n  delete json._id;\n  const hexKeys = ['gasLimit', 'gasUsed', 'nonce', 'number', 'size', 'timestamp'];\n  hexKeys.forEach(key => {\n    if (key === 'timestamp') {\n      json[key] = this[key].valueOf() / 1000;\n    }\n\n    if (this[key]) {\n      json[key] = this[key].toString(16);\n    }\n  });\n  return json;\n};\n\nmodule.exports = mongoose.models.Block || mongoose.model('Block', Block);","map":{"version":3,"sources":["/home/user1/Development/taraxa/explorer-api/models/block.js"],"names":["mongoose","require","Block","Schema","_id","type","String","author","extraData","gasLimit","Number","gasUsed","logsBloom","miner","mixHash","nonce","number","unique","parentHash","receiptsRoot","sha3Uncles","size","stateRoot","timestamp","Date","index","totalDifficulty","transactions","ref","transactionsRoot","uncles","versionKey","statics","fromRPC","data","json","Object","assign","hash","hexKeys","forEach","key","parseInt","length","map","doc","methods","toRPC","toJSON","valueOf","toString","module","exports","models","model"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\n\nconst Block = new mongoose.Schema({\n    _id: {type: String}, // block hash\n    author: {type: String},\n    extraData: {type: String},\n    gasLimit: {type: Number},\n    gasUsed: {type: Number},\n    logsBloom: {type: String},\n    miner: {type: String},\n    mixHash: {type: String},\n    nonce: {type: Number},\n    number: {type: Number, unique: true},\n    parentHash: {type: String},\n    receiptsRoot: {type: String},\n    sha3Uncles: {type: String},\n    size: {type: Number},\n    stateRoot: {type: String},\n    timestamp: {type: Date, index: true},\n    totalDifficulty: {type: Number},\n    transactions: [{type: String, ref: 'Tx'}],\n    transactionsRoot: {type: String},\n    uncles: [{type: String}]\n}, {\n    versionKey: false\n});\n\nBlock.statics.fromRPC = function fromRPC(data) {\n    const json = Object.assign({}, data);\n    // move hash to primary key _id\n    json._id = json.hash;\n    delete json.hash;\n\n    const hexKeys = ['gasLimit', 'gasUsed', 'nonce', 'number', 'size', 'timestamp'];\n    hexKeys.forEach(key => {\n        if (json[key]) {\n            json[key] = parseInt(json[key], 16);\n        }\n        if (key === 'timestamp') {\n            json[key] = json[key] * 1000;\n        }\n    });\n\n    if (json.transactions && json.transactions.length) {\n        json.transactions = json.transactions.map(doc => doc.hash || doc);\n    }\n\n    return new this(json);\n};\n\nBlock.methods.toRPC = function toRPC() {\n    const json = this.toJSON();\n\n    // get hash from primary key _id\n    json.hash = this._id;\n    delete json._id;\n\n    const hexKeys = ['gasLimit', 'gasUsed', 'nonce', 'number', 'size', 'timestamp'];\n    hexKeys.forEach(key => {\n        if (key === 'timestamp') {\n            json[key] = this[key].valueOf() / 1000;\n        }\n        if (this[key]) {\n            json[key] = this[key].toString(16);\n        }\n    });\n\n    return json;\n};\n\nmodule.exports = mongoose.models.Block || mongoose.model('Block', Block);"]},"metadata":{},"sourceType":"script"}