{"ast":null,"code":"const mongoose = require('mongoose');\n\nconst Tx = new mongoose.Schema({\n  _id: {\n    type: String\n  },\n  // tx hash\n  blockHash: {\n    type: String,\n    ref: 'Block',\n    index: true\n  },\n  blockNumber: {\n    type: Number,\n    index: true\n  },\n  from: {\n    type: String,\n    index: true\n  },\n  gas: {\n    type: Number\n  },\n  gasPrice: {\n    type: Number\n  },\n  input: {\n    type: String\n  },\n  nonce: {\n    type: Number\n  },\n  to: {\n    type: String,\n    index: true\n  },\n  transactionIndex: {\n    type: Number\n  },\n  value: {\n    type: Number\n  },\n  //not in rpc\n  timestamp: {\n    type: Date,\n    default: Date.now\n  } //override with block timestamp on finality\n\n});\n\nTx.statics.fromRPC = function fromRPC(data) {\n  const json = Object.assign({}, data); // using hash as primary key\n\n  json._id = json.hash;\n  delete json.hash;\n  const hexKeys = ['blockNumber', 'gas', 'gasPrice', 'nonce', 'value', 'timestamp'];\n  hexKeys.forEach(key => {\n    if (json[key]) {\n      json[key] = parseInt(json[key], 16);\n    }\n\n    if (key === 'timestamp') {\n      json[key] = json[key] * 1000;\n    }\n  });\n  return new this(json);\n};\n\nTx.methods.toRPC = function toRPC() {\n  const json = this.toJSON(); // using hash as primary key\n\n  json.hash = this._id;\n  delete json._id; // delete non standard key\n\n  delete json.timestamp;\n  const hexKeys = ['blockNumber', 'gas', 'gasPrice', 'nonce', 'value'];\n  hexKeys.forEach(key => {\n    if (this[key]) {\n      json[key] = this[key].toString(16);\n    }\n  });\n  return json;\n};\n\nmodule.exports = mongoose.models.Tx || mongoose.model('Tx', Tx);","map":{"version":3,"sources":["/home/user1/Development/taraxa/explorer-api/models/tx.js"],"names":["mongoose","require","Tx","Schema","_id","type","String","blockHash","ref","index","blockNumber","Number","from","gas","gasPrice","input","nonce","to","transactionIndex","value","timestamp","Date","default","now","statics","fromRPC","data","json","Object","assign","hash","hexKeys","forEach","key","parseInt","methods","toRPC","toJSON","toString","module","exports","models","model"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\n\nconst Tx = new mongoose.Schema({\n    _id: {type: String}, // tx hash\n    blockHash: {type: String, ref: 'Block', index: true},\n    blockNumber: {type: Number, index: true},\n    from: {type: String, index: true},\n    gas: {type: Number},\n    gasPrice: {type: Number},\n    input: {type: String},\n    nonce: {type: Number},\n    to: {type: String, index: true},\n    transactionIndex: {type: Number},\n    value: {type: Number},\n\n    //not in rpc\n    timestamp: {type: Date, default: Date.now} //override with block timestamp on finality\n});\n\nTx.statics.fromRPC = function fromRPC(data) {\n    const json = Object.assign({}, data);\n    // using hash as primary key\n    json._id = json.hash;\n    delete json.hash;\n\n    const hexKeys = ['blockNumber', 'gas', 'gasPrice', 'nonce', 'value', 'timestamp'];\n    hexKeys.forEach(key => {\n        if (json[key]) {\n            json[key] = parseInt(json[key], 16);\n        }\n        if (key === 'timestamp') {\n            json[key] = json[key] * 1000;\n        }\n    });\n\n    return new this(json);\n};\n\nTx.methods.toRPC = function toRPC() {\n    const json = this.toJSON();\n\n    // using hash as primary key\n    json.hash = this._id;\n    delete json._id;\n\n    // delete non standard key\n    delete json.timestamp;\n\n    const hexKeys = ['blockNumber', 'gas', 'gasPrice', 'nonce', 'value'];\n    hexKeys.forEach(key => {\n        if (this[key]) {\n            json[key] = this[key].toString(16);\n        }\n    });\n\n    return json;\n};\n\nmodule.exports = mongoose.models.Tx || mongoose.model('Tx', Tx);"]},"metadata":{},"sourceType":"script"}